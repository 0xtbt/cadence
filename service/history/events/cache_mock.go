// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package events is a generated GoMock package.
package events

import (
	gomock "github.com/golang/mock/gomock"
	shared "github.com/uber/cadence/.gen/go/shared"
	reflect "reflect"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetEvent mocks base method
func (m *MockCache) GetEvent(domainID, workflowID, runID string, firstEventID, eventID int64, branchToken []byte, shardID int) (*shared.HistoryEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", domainID, workflowID, runID, firstEventID, eventID, branchToken, shardID)
	ret0, _ := ret[0].(*shared.HistoryEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent
func (mr *MockCacheMockRecorder) GetEvent(domainID, workflowID, runID, firstEventID, eventID, branchToken, shardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockCache)(nil).GetEvent), domainID, workflowID, runID, firstEventID, eventID, branchToken, shardID)
}

// PutEvent mocks base method
func (m *MockCache) PutEvent(domainID, workflowID, runID string, eventID int64, event *shared.HistoryEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutEvent", domainID, workflowID, runID, eventID, event)
}

// PutEvent indicates an expected call of PutEvent
func (mr *MockCacheMockRecorder) PutEvent(domainID, workflowID, runID, eventID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvent", reflect.TypeOf((*MockCache)(nil).PutEvent), domainID, workflowID, runID, eventID, event)
}

// DeleteEvent mocks base method
func (m *MockCache) DeleteEvent(domainID, workflowID, runID string, eventID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteEvent", domainID, workflowID, runID, eventID)
}

// DeleteEvent indicates an expected call of DeleteEvent
func (mr *MockCacheMockRecorder) DeleteEvent(domainID, workflowID, runID, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockCache)(nil).DeleteEvent), domainID, workflowID, runID, eventID)
}
